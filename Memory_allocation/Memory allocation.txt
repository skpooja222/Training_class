Memory allocation

--> When we create a C program and run the program, its executable file is stored in the 
RAM of the computer in an organized manner.

--> C program consists of the following sections in the program:

Text segment
Initialized data segment
Uninitialized data segment
Stack
Heap



1. Text segment
--> The text segment is also known as the code segment. When we compile any program, it creates an executable file like a.out, .exe, etc., 
that gets stored in the text or code section of the RAM memory.

--> If we store the instructions in the hard disk, then the speed for accessing the instructions from the hard disk becomes slower as hard disk works on the 
serial communication so taking the data from the hard disk will be slower, whereas the RAM is directly connected to the data and address bus so accessing 
the data from the RAM is faster.


2. Data section
-->The data which we use in our program will be stored in the data section.

--> Since the variables declared inside the main() function are stored in the stack, but the variables declared outside the main() method will be stored in the data section. 
--> The variables declared in the data section could be stored in the form of initialized, uninitialized, and it could be local or global. Therefore, the data section is 
divided into four categories, i.e., initialized, uninitialized, global, or local.


The data section consists of two segments:

a.Uninitialized data segment

---> The uninitialized data segment is also known as a .bss segment that stores all the uninitialized global, local and external variables. If the global, static and external variables
 are not initialized, they are assigned with zero value by default.

b. Initialized data segment
--> An initialized data segment is also known as the data segment. A data segment is a virtual address space of a program that contains all the global and static variables which are 
explicitly initialized by the programmer.


3. Stack
--> When we define a function and call that function then we use the stack frame. The variables which are declared inside the function are stored in the stack.

--> The stack section plays a very important role in the memory because whenever the function is called, a new stack frame is created.
---> Stack is also used for recursive functions. When the function is called itself again and again inside the same function which causes the stack overflow 
condition and it leads to the segmentation fault error in the program.

4. Heap
Heap memory is used for the dynamic memory allocation.
--> Heap memory begins from the end of the uninitialized data segment and grows upwards to the higher addresses
--> The heap memory can be used by all the shared libraries and dynamically loaded modules. The free() function is used to deallocate the memory from the heap.



